#!/usr/bin/env bash
#/ groundskeeper, Version 0.0.4
#/ Copyright 2019, Graham Weldon <graham@grahamweldon.com>
#/

CLONE_DEPTH=1
CORE_PLANS_GIT_URI="https://github.com/habitat-sh/core-plans.git"
CLONE_DIR="core-plans"
STUDIO_TYPE="groundskeeper"
DEBUG=${DEBUG:-0}
FORMAT=${FORMAT:-"text"}
ALL_PLANS=()
SKIP_CLONE=${SKIP_CLONE:-0}
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd )"
RELEASE_MONITORING_ID_FILE="${SCRIPT_DIR}/release_monitoring_ids"

declare -A release_monitoring_ids

debug_echo() {
  if [ ${DEBUG} -eq 0 ]; then
    return 0
  fi

  echo "${@}" >&2
}

error() {
  echo "$@" >&2
}

# Prepare dependencies for this script
# - Habitat repo (contains REPL attach command)
prepare_dependencies() {
  echo "[ Habitat ] ------------------------------------------"
  if [ ! -d habitat ]; then
    git clone --depth "${CLONE_DEPTH}" https://github.com/habitat-sh/habitat.git habitat
    return $?
  fi
  update_repository habitat
  return $?
}

# Clone the core-plans repository
clone_repository() {
  echo "[ Core Plans ] ------------------------------------------"
  if [ ! -d "${CLONE_DIR}" ]; then
    git clone --depth "${CLONE_DEPTH}" "${CORE_PLANS_GIT_URI}" "${CLONE_DIR}"
    return $?
  fi
  update_repository "${CLONE_DIR}"
  return $?
}

# Update the repository in the specified directory (must already exist)
# ```
# update_repository habitat
# ```
update_repository() {
  pushd "${1}" > /dev/null
    git remote update && \
    git reset --hard origin/master
    status=$?
  popd > /dev/null
  return ${status}
}

# Get an array of all plans
get_all_plans() {
  ALL_PLANS=($(find "${CLONE_DIR}" -name plan.sh -d 2 | sort | awk -F'/' '{print $2}'))
}

debug_plans() {
  for plan in "${ALL_PLANS[@]}"; do
    echo " - ${plan}"
  done
}

is_base_plan() {
  local plan="${1}"
  cat "${CLONE_DIR}/base-plans.txt" | grep "\/${plan}$" > /dev/null
  return $?
}

do_latest_version() {
  do_default_latest_version "${1}"
}

# Meta function, to find latest release from any plan.
# The hard work is done in other functions, this ties them together.
do_default_latest_version() {
  local plan="${1}"
  local is_github=0
  local pkg_source_line=""
  local pkg_source=""

  pushd "${CLONE_DIR}/${plan}" > /dev/null
    pkg_source="$(cat plan.sh)"

    # Replace _distname or pkg_distname
    local distname="$(echo "${pkg_source}" \
      | egrep '^(pkg)?_distname=' \
      | awk -F'=' '{print $2}' \
      | tr -d '"{}')"
    distname="$(echo "${distname}" \
      | sed -E "s/\\\$pkg_name/${plan}/g")"
    pkg_source="$(echo "${pkg_source}" \
      | sed -E "s/\\\$\{?(pkg)?_distname\}?/${distname}/g")"

    local url_base="$(echo "${pkg_source}" \
      | egrep '^_url_base=' \
      | awk -F'=' '{print $2}' \
      | tr -d '"{}')"
    # This uses '!' as the separator for sed, to avoid url:// screwing things up.
    pkg_source="$(echo "${pkg_source}" \
      | sed -E "s!\\\$\{?_url_base\}?!${url_base}!g")"

    pkg_source_line="$(echo "${pkg_source}" \
      | grep '^pkg_source=')"

    # Replace idents that have a ${pkg_name} or $pkg_name embedded in them
    pkg_source_line="$(echo "${pkg_source_line}" \
      | sed -E "s/\\\$\{?pkg_name\}?/${plan}/g")"

    pkg_source_line="$(echo "${pkg_source_line}" | sed -E "s/\\\$\{?pkg_name\}?/${plan}/g")"

  popd > /dev/null

  case "${plan}" in
    R)
      do_r_latest_version
      return $?
      ;;
    ansible)
      do_ansible_latest_version
      return $?
      ;;
    acl)
      do_acl_latest_version
      return $?
      ;;
    alex)
      do_alex_latest_version
      return $?
      ;;
    alsa-lib)
      do_alsa_lib_latest_version
      return $?
      ;;
    ant)
      # ant currently references github - Maybe that should change in its plan.sh
      apache_latest_version apache-ant ant/source
      return $?
      ;;
    artifactory|artifactory-pro)
      do_artifactory_latest_version
      return $?
      ;;
    bash-static)
      # bash-static sources bash
      do_default_latest_version "bash"
      return $?
      ;;
    libsodium|libsodum-musl)
      # Force the github check with the correct repo name
      github_latest_release "jedisct1/libsodium"
      return $?
      ;;
    lsof)
      do_lsof_latest_version
      return $?
      ;;
    wget-static)
      do_default_latest_version "wget"
      return $?
      ;;
    *)
      if [[ "${plan}" =~ ^postgresql ]]; then
        postgresql_code="$(echo "${plan}" | sed 's/postgresql//')"
        do_postgresql_latest_version "${postgresql_code}"
        return $?
      fi

      if [[ "${plan}" =~ ^erlang ]]; then
        erlang_code=""
        if [[ "${plan}" = "erlang16" ]]; then
          erlang_code="R16"
        else
          erlang_code="$(echo "${plan}" | sed 's/^erlang//')"
        fi
        do_erlang_latest_version "${erlang_code}"
        return $?
      fi

      if [[ "${pkg_source_line}" =~ github\.com\/.*\/archive\/ ]] || [[ "${pkg_source_line}" =~ github\.com\/.*\/releases\/ ]]; then
        is_github=1
        repo_ident=$(github_repo_ident "${plan}")
        github_latest_release "${repo_ident}"
        return $?
      fi

      if [[ "${pkg_source_line}" =~ downloads\.sourceforge\.net\/ ]]; then
        project_name="$(sourceforge_project_name "${plan}")"
        sourceforge_latest_version "${project_name}"
        return $?
      fi

      if [[ "${pkg_source_line}" =~ archive\.apache\.org ]]; then
        local apache_dir="${plan}"
        if [ "${plan}" = "apr-util" ]; then
          apache_dir="apr"
        fi
        apache_latest_version "${plan}" "${apache_dir}"
        return $?
      fi

      if [[ "${pkg_source_line}" =~ download\.gnome\.org ]]; then
        case "${plan}" in
          gtk2)
            gnome_latest_version_constrained "gtk+" "2\.[2-8]"
            ;;
          *)
            gnome_latest_version "${plan}"
            ;;
        esac
        return $?
      fi

      if [[ "${pkg_source_line}" =~ download\.savannah\.gnu\.org ]]; then
        savannah_gnu_latest_version "${plan}"
        return $?
      fi

      if [[ "${pkg_source_line}" =~ ftp\.gnu\.org ]]; then
        ftp_gnu_latest_version "${plan}"
        return $?
      fi

      if [[ "${pkg_source_line}" =~ releases\.hashicorp ]]; then
        hashicorp_latest_version "${plan}"
        return $?
      fi

      if [[ "${pkg_source_line}" =~ www\.x\.org ]]; then
        local xorg_type="lib"
        if [[ "${pkg_source_line}" =~ \/proto\/ ]]; then
          xorg_type="proto"
        fi
        if [[ "${pkg_source_line}" =~ \/app\/ ]]; then
          xorg_type="app"
        fi
        if [[ "${pkg_source_line}" =~ \/xcb\/ ]]; then
          xorg_type="xcb"
        fi
        xorg_latest_version "${plan}" "${xorg_type}"
        return $?
      fi

      release_monitoring_latest_version "${plan}"
      return $?
      ;;
  esac
}

# Check 'github releases' for the latest version of a repo
#
# 1. Get latest release from github
# 2. If (1) is a pre-release, try fetching the latest non-prerelease from all releases
# 3. If (1) is invalid/null, try fetching the latest non-prerelease from all releases
#
# ```
# github_latest_release owner/repo-name
# ```
github_latest_release() {
  local ident="${1}"
  debug_echo "github_latest_release(${ident})"

  # Some repositories use Releases correctly. Those are by far the simplest cases.
  local latest_json=$(curl -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} -s "https://api.github.com/repos/${ident}/releases/latest")
  local is_prerelease=$(echo "${latest_json}" | jq -r '.prerelease or .draft')
  if [ "${is_prerelease}" = "true" ]; then
    github_last_release "${ident}"
    return $?
  fi

  local latest_version=$(echo "${latest_json}" | jq -r '.tag_name')
  debug_echo "Latest version from JSON: ${latest_version}"

  # If the releases are empty, we can also check tags as an alternative
  if [ "${latest_version}" = "" -o "${latest_version}" = "null" ]; then
    # TODO: Search for latest tag
    echo "unknown"
    return 1
  fi

  echo "${latest_version}"
  return 0
}

# Check 'github releases' and read the latest non-prerelease, non-draft release.
#
# In contrast with the above `github_latest_release`, this gets a list of all
# releases, not the one Github has tagged as 'latest'. This is due to the way
# some projects use tags as releases, but don't specifically produce a release.
github_last_release() {
  local latest_json=$(curl -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} -s "https://api.github.com/repos/${ident}/releases")

  # TODO:
  #   - Check if there are any releases
  #   - Get the last one that is not pre-release or draft
  #   - echo release
  #   - return 0

  local last_release=$(echo "${latest_json} | jq -r '[.[] | select(.prerelease == false and .draft == false)][0]'")

}

# Get the github repo ident (owner/repo) from a pkg_source line
github_repo_ident() {
  local plan="${1}"
  local ident=""
  pushd "${CLONE_DIR}/${plan}" > /dev/null
    ident=$(cat plan.sh \
      | grep pkg_source \
      | egrep "github\.com\/.*\/(archive|releases)\/" \
      | sed -E 's/^.*github\.com\/([^\/]+)\/([^\/]+)\/.*/\1\/\2/')
    #                             ^ org     ^ repo
    # Replace idents that have a ${pkg_name} or $pkg_name embedded in them
    ident="$(echo "${ident}" | sed -E "s/\\\$\{?pkg_name\}?/${plan}/g")"
  popd > /dev/null

  if [ "${ident}" = "" ]; then
    echo "Github: unknown/unknown"
    return 1
  fi

  echo "${ident}"
  return 0
}

sourceforge_latest_version() {
  local ident="${1}"
  latest_version=$(curl -s -I -L -D - "https://sourceforge.net/projects/${ident}/files/latest/download?source=files" -o /dev/null \
    | grep 'filename=' \
    | sed 's/^.*filename="\([^"]*\)".*/\1/' \
    | sed -E 's/\.(tar\.(bz2|gz|xz|Z|lz)|zip|7z)$//' \
    | sed 's/_src_all$//')
  status=$?
  debug_echo "Sourceforge latest version (${ident}): ${latest_version}"

  if [ "${latest_version}" = "" ] && [ $status ]; then
    echo "unknown"
    return 1
  fi

  echo "${latest_version}"
  return 0
}

# Get the project name from a pkg_source line
sourceforge_project_name() {
  local plan="${1}"
  local ident=""

  pushd "${CLONE_DIR}/${plan}" > /dev/null
    ident=$(cat plan.sh \
      | grep pkg_source \
      | sed -E 's/^.*downloads.sourceforge\.net\/(project|sourceforge)\/([^\/]+)\/.*$/\2/')
  popd > /dev/null

  if [ "${ident}" = "" ]; then
    echo "Sourceforge: unknown"
    return 1
  fi

  echo "${ident}"
  return 0
}

# Get the latest version from the apache archive. Takes 2 arguments: Directory and PackageName
apache_latest_version() {
  local plan="${1}"
  local directory="${2:-1}"

  echo "$(curl -s "https://archive.apache.org/dist/${directory}/" \
    | grep "${plan}-[0-9]" \
    | grep -v -E "\.(asc|md5|sha)" \
    | sed -E 's/^.*(zip|bz2|gz|xz|Z|7z|lz)">([^<]*)<\/a>.*$/\2/' \
    | sed -E 's/^(.*)\.(tar\.(bz2|gz|xz|Z|lz)|zip|7z)/\1/' \
    | grep -v "RC" \
    | grep -v "win32" \
    | sed 's/-src$//' \
    | sort --version-sort \
    | uniq \
    | tail -1)"
  return 0
}

# Get the latest version from downloads.gnome.org. Takes plan as argument
gnome_latest_version() {
  local plan="${1}"
  echo "$(curl -s https://download.gnome.org/sources/${plan}/cache.json \
    | jq -r --arg PLAN_NAME "${plan}" '.[2][$PLAN_NAME] | .[]' \
    | sort --version-sort \
    | tail -1)"
  return 0
}

gnome_latest_version_constrained() {
  local plan="${1}"
  local constraint="${2}"
  curl -s "https://download.gnome.org/sources/${plan}/cache.json" \
    | jq -r --arg PLAN_NAME "${plan}" '.[2][$PLAN_NAME] | .[]' \
    | sort --version-sort \
    | grep "^${constraint}" \
    | tail -1
  return 0
}

# Get the latest version from the GNU Savannah server. Takes plan as argument
savannah_gnu_latest_version() {
  local plan="${1}"
  echo "$(curl -s "https://download.savannah.gnu.org/releases/${plan}/" \
    | grep "${plan}-[0-9]" \
    | grep -v '\.sig">' \
    | sed -E 's/^.*(gz|bz2|xz|Z|lz)">([^<]*)\.tar\.(gz|bz2|xz|Z|lz)<\/a>.*/\2/' \
    | sed -E 's/\.(src\.)?tar\.gz//' \
    | egrep -v '(rc[0-9]+|pre)' \
    | egrep -v '\-w32\.zip' \
    | sort --version-sort \
    | tail -1)"
  return 0
}

# Get the latest version from the GNU FTP server. Takes plan as argument
ftp_gnu_latest_version() {
  local plan="${1}"
  echo "$(curl -s "https://ftp.gnu.org/gnu/${plan}/" \
    | grep "${plan}" \
    | egrep '\.tar\.(gz|bz2|xz|Z|lz)"' \
    | egrep -v 'latest|rc[0-9]+|beta|alpha' \
    | grep -v 'doc-' \
    | sed -E 's/^.*(gz|bz2|xz|Z|lz)">([^<]*)\.tar\.(gz|bz2|xz|Z|lz)<\/a>.*/\2/' \
    | sort --version-sort \
    | tail -1)"
  return 0
}

xorg_latest_version() {
  local plan="${1}"
  local xorg_type="${2:-lib}"

  local xorg_cache="${cache_xorg_lib}"
  case "${xorg_type}" in
    app)
      xorg_cache="${cache_xorg_app}"
      ;;
    proto)
      xorg_cache="${cache_xorg_proto}"
      ;;
    xcb)
      xorg_cache="${cache_xorg_xcb}"
      ;;
  esac

  echo "${xorg_cache}" \
    | grep -i "${plan}" \
    | grep -v '\.sig"' \
    | sed -E 's/^.*(gz|bz2|xz|Z)">([^<]*)\.tar\.(gz|bz2|xz|Z)<\/a>.*/\2/' \
    | sort --version-sort \
    | tail -1
  return 0
}

# Reads Hashicorp release information from JSON, plan name as first argument
hashicorp_latest_version() {
  local plan="${1}"
  echo "$(curl -s https://releases.hashicorp.com/${plan}/index.json \
    | jq -r '.versions | keys | .[]' \
    | egrep -v '(\+ent|rc[0-9]+|beta[0-9]+)' \
    | sort --version-sort \
    | tail -1)"
  return $?
}

# load_release_monitoring_metadata populates the global
# release_monitoring_ids associative arrays
load_release_monitoring_metadata() {
  debug_echo "Loading release-monitoring.org IDs from $RELEASE_MONITORING_ID_FILE"
  while read -r plan_name package_id; do
    # We prefix the plan name here to correctly handle packages like
    # 7zip which start with numbers.
    local key="plan${plan_name}"
    release_monitoring_ids[$key]=$package_id
  done <"$RELEASE_MONITORING_ID_FILE"
  debug_echo "Loaded ${#release_monitoring_ids[@]} release-monitoring.org IDS"
}

# lookup_release_monitoring_project_id takes a plan_name and returns a
# release-monitoring.org project ID. "unknown" is returned if the key
# is not known.
lookup_release_monitoring_project_id() {
  local plan_name=$1
  local key="plan${plan_name}"
  echo "${release_monitoring_ids[$key]:-unknown}"
}

# get_release_monitoring_version queries the release minotirng API for
# the latest version of the given project_id.
get_release_monitoring_version() {
  local project_id=$1
  local curl_logging_args
  local output

  if [[ "$DEBUG" -ge 2 ]]; then
    curl_logging_args=("-vv")
  else
    curl_logging_args=("--stderr" "/dev/null")
  fi

  debug_echo "Looking up version from https://release-monitoring.org/api/project/$project_id"
  local url="https://release-monitoring.org/api/project/$project_id"
  if output=$(curl "${curl_logging_args[@]}" --retry 2 "$url"); then
    jq -r .version <<<"$output"
  else
    error "release-monitoring.org returned an error."
    error "STDOUT:"
    error "$output"
    error ""
    return 1
  fi
}

release_monitoring_latest_version() {
  local plan=$1
  local id
  debug_echo "Using release-monitoring.org fallback lookup for ${plan}"
  id="$(lookup_release_monitoring_project_id "$plan")"
  if [[ "${id}" = "unknown" ]]; then
    debug_echo "No release-monitoring.org ID for ${plan}"
    return 1
  fi

  get_release_monitoring_version "${id}"
}

# Attempt to clean up a version string, takes the plan name as a parameter
# in case it has a special / weird ruleset.
# ```
# clean_version_string v0.4.0 acbuild
# clean_version_string v0.4.0
# ```
clean_version_string() {
  local version="${1}"
  local plan="${2:-}"
  local clean_version="${version}"

  # lowercase the string - BSD sed doesn't do case insensitive matching.
  plan="$(echo "${plan}" | tr '[:upper:]' '[:lower:]')"
  clean_version="$(echo "${clean_version}" | tr '[:upper:]' '[:lower:]')"

  # TODO: Variable substitution used in the pkg_version (eg: bash)
  # if [[ "${version}" =~ "\${" ]]; then
  #   local variable = "$(echo "${version}" | sed -E 's/\${([^}]+)}/\1/')"
  #   debug_echo "Embedded variable ${variable}"
  # fi

  if [ "${plan}" = "7zip" ]; then
    plan="p7zip"
  fi

  # Remove preceding 'v'
  clean_version="$(echo "${clean_version}" | sed 's/^v//')"

  # Remove preceding 'release-'
  clean_version="$(echo "${clean_version}" | sed 's/^release-//')"

  # Remove preceding plan name (eg: azure-cli, 7zip), and also
  # checking for apache- prefix
  clean_version="$(echo "${clean_version}" | sed -E "s/^(apache-)?${plan}[-_]//")"

  # Remove preceding plan name without hyphens (eg: c-ares)
  local no_hyphen_name="$(echo "${plan}" | sed 's/-//')"
  clean_version="$(echo "${clean_version}" | sed -E "s/^(apache-)?${no_hyphen_name}[-_]//")"

  # c-ares comes back with underscores instead of periods.
  clean_version="$(echo "${clean_version}" | sed -E "s/^([0-9]+)_([0-9]+)_([0-9]+)/1.\2.\3/")"

  debug_echo "Cleaned version (${plan}): '${version}' => '${clean_version}'"
  echo "${clean_version}"
  return 0
}

# Get the current version of a plan
# ```
# plan_version hugo
# ```
plan_version() {
  local version=""
  pushd "${CLONE_DIR}/${plan}" > /dev/null
    case "${plan}" in
      bash)
        version="$(do_bash_current_version)"
        ;;
      *)
        version="$(cat plan.sh | grep "^pkg_version=" | awk -F'=' '{print $2}' | tr -d '"{}')"
        ;;
    esac
  popd > /dev/null

  if [ "${version}" = "" ]; then
    return 1
  fi

  echo "${version}"
  return 0
}

# **Internal** Used to override the interactive shell/debugging session
# borrowed from hab-plan-build.
_attach_whereami() {
  echo
}

check_environment() {
  if [ -z "${GITHUB_TOKEN:-}" -o -z "${GITHUB_USERNAME}" ]; then
    echo "You must set your Github Username and Token:"
    echo "  export GITHUB_TOKEN=\"16469f23c164a8a92fd3c438e06a5ae2340d7f14\""
    echo "  export GITHUB_USERNAME=\"predominant\""
    echo
    echo "You can create a Github personal access token here:"
    echo "  https://github.com/settings/tokens/new"
    echo
    exit 1
  fi
}

check_environment
if [ ${SKIP_CLONE} -eq 0 ]; then
  prepare_dependencies || exit 1
  echo
  clone_repository || exit 1
  echo
fi

source habitat/components/plan-build/bin/public.bash
source habitat/components/plan-build/bin/shared.bash

source "$(dirname ${0})/_plan_specific.bash"

load_release_monitoring_metadata || exit 1

# Cache the x.org lists, because they're all on the same page.
cache_xorg_lib="$(curl -s https://www.x.org/releases/individual/lib/)"
cache_xorg_app="$(curl -s https://www.x.org/releases/individual/app/)"
cache_xorg_proto="$(curl -s https://www.x.org/releases/individual/proto/)"
cache_xorg_xcb="$(curl -s https://www.x.org/releases/individual/xcb/)"

if [ -z $1 ]; then
  get_all_plans
else
  ALL_PLANS=("$@")
fi

plan_count_total=0
detected_version_total=0

if [ "${FORMAT}" = "json" ]; then
  echo "{\"plans\":["
fi

for plan in "${ALL_PLANS[@]}"; do
  if [[ "${plan}" =~ ^scaffolding ]]; then
    # Skip scaffolding plans.
    continue
  fi

  plan_count_total=$((plan_count_total + 1))

  if [ "${DEBUG}" -ge 1 ]; then
    echo
  fi

  # pv = Plan Version
  pv=$(plan_version "${plan}")
  # lv = Latest Version
  lv=$(clean_version_string "$(do_latest_version "${plan}")" "${plan}")
  lv_status=$?

  update_status="|"
  if [ ${lv_status} -eq 0 ] && [ "${pv}" != "${lv}" ]; then
    update_status=">"
  fi
  if [ "${lv}" = "unknown" ] || [ "${lv}" = "" ] || [ -z "${lv}" ]; then
    update_status="-"
  else
    detected_version_total=$((detected_version_total + 1))
  fi

  base_plan="false"
  is_base_plan "${plan}"
  if [ $? -eq 0 ]; then
    base_plan="true"
  fi

  case "${FORMAT}" in
    json)
      lv=$(echo "${lv}" | sed 's/"/\\"/g')
      echo "{\"plan\":\"${plan}\",\"status\":\"${update_status}\",\"plan_version\":\"${pv}\",\"latest_version\":\"${lv}\",\"base\":${base_plan}},"
      ;;
    *)
      echo "${update_status} ${plan} ${pv} ${lv} ${base_plan}"
      ;;
  esac
done

if [ "${FORMAT}" = "json" ]; then
  echo "{}],"
fi

case "${FORMAT}" in
  json)
    echo "\"summary\":{"
    echo "\"total_plans\":${plan_count_total},"
    echo "\"found_versions\":${detected_version_total}"
    echo "}]"
    ;;
  *)
    echo
    echo "[ Summary ] ------------------------------------------"
    echo "  Total plans:     ${plan_count_total}"
    echo "  Found versions:  ${detected_version_total}"
    echo
    ;;
esac